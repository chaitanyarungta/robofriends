{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App2.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","SearchBox","type","placeholder","class","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App2","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAiBeA,EAhBJ,SAACC,GACX,OAEC,yBAAKC,UAAU,wDACd,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACtB,6BACC,gCAAMJ,EAAMK,KAAZ,KACA,+BAAKL,EAAMM,MAAX,QCqBWC,EA1BA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEVC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GAIpC,OACC,kBAAE,EAAF,CACEC,IAAKD,EACLR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAKrB,OACC,6BAEEG,ICVWK,EAVC,SAACd,GAChB,OACC,2BACAe,KAAK,SACLC,YAAY,gBACZC,MAAM,UACNC,SAAUlB,EAAMmB,gBCEHC,EARF,SAACpB,GACb,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UACjExB,EAAMyB,WCuBKC,G,wDAzBd,WAAY1B,GACX,IAAD,8BACC,cAAMA,IACD2B,MAAM,CACVC,UAAU,GAHZ,E,8DAOkBC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,yDAGDG,KAAK/B,MAAMyB,a,GAlBOQ,cCkEZC,E,kDAvDd,aAAc,IAAD,8BACZ,gBAgBDC,eAAe,SAACC,GAEf,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SAjB1C,EAAKZ,MAAM,CAEVnB,OAAQ,GACR6B,YAAa,IALF,E,gEAWO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAY5B,IAAD,OAGDC,EAAed,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAC,GAC7C,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEjE,OAA8B,IAA3BjB,KAAKJ,MAAMnB,OAAO0C,OACb,wCAIL,yBAAKjD,UAAU,MACf,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWkB,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQqC,W,GA3CNM,IAAMlB,WCALmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,6BACC,kBAAE,EAAF,QAIFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.0efc9fda.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props) =>{\r\n\treturn (\r\n\r\n\t\t<div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t< img alt='robots' src={`https://robohash.org/${props.id}?200*200`}/> \r\n\t\t\t<div>\r\n\t\t\t\t<h2> {props.name} </h2>\r\n\t\t\t\t<p> {props.email} </p> \r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\t//the html objectreturned by Card.js file will be stored in cardComponent List\r\n\tconst cardComponent=robots.map((user,i)=>{\r\n\t\t// if (true){\r\n\t\t// \tthrow new Error('NOOOOOOO!');\r\n\t\t// }\r\n\t\treturn (\r\n\t\t\t< Card \r\n\t\t\t  key={i} \r\n\t\t\t  id={robots[i].id} \r\n\t\t\t  name={robots[i].name} \r\n\t\t\t  email={robots[i].email}\r\n\t\t\t />\r\n\t\t);\r\n\t\t\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t\r\n\t\t\t{cardComponent}\r\n\r\n\t\t</div>\r\n\t\t\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox=(props) =>{\r\n\treturn (\r\n\t\t<input \r\n\t\ttype='search' \r\n\t\tplaceholder='search robots' \r\n\t\tclass='mb2 ml2'\r\n\t\tonChange={props.searchChange} />\r\n\t);\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\t\t\r\n)\r\n}\r\n\r\nexport default Scroll;\r\n","import React , {Component} from 'react';\r\n//will use React.Component below if {Component} is not used above\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError :false\r\n\t\t}\r\n\t}\r\n\t//to catch the error , if occured in react component wrapped within ErrorBoundry.js react component\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError){//if true\r\n\t\t\treturn <h1>Oooops. That is not good </h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children ; \r\n\t\t\r\n\r\n\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","//refer App2.js from 10 onwards videos of 19th section \r\n// import React, {Component} from 'react' ; or\r\nimport React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll.js';\r\n//import {robots} from '../containers/robots';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js';\r\n\r\n\r\n//class App extends Component {} or\r\nclass App2 extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()// it is compulsory to use super() with 'this' keyword  \r\n\t\tthis.state={\r\n\t\t\t// fetching robots from web server in real life rather than manually written robots.js , therefore it should be empty while declaring state.\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\t// constructor and componentDidMount are lifecycle methods that are automatically called if \r\n\t//defined within react component when react component is mounted on html web page\r\n\t// we are using below lifecycle method which is automatically called to fetch user data from web server instead of robots.js to make webapp more realistic.\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots: users}));\r\n\t\t\t \r\n\t}\r\n\tonSearchChange=(event) =>{// function is called whenever input in search box changes\r\n\r\n\t\tthis.setState({searchField : event.target.value});//used to change change the state\r\n\t\t// const filteredRobots=this.state.robots.filter(robot =>{\r\n\t\t// \treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t// })\r\n\t\t//console.log(filteredRobots);    \r\n\t}//here we are defining class method and passing it as prop to be used by other react smaller components. \r\n\r\n\trender(){\r\n\t\t//const {robots, searchfield}= this.state; if we use this code then we can remove \r\n\t\t//this.state below before robots. here {robots, searchfield} is a structure\r\n\t\tconst filteredRobots=this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length===0){\r\n\t\t\treturn <h1>Loading </h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className=\"f1\">  RoboFriends </h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry> \r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\r\n\t);\r\n\t\t}\r\n\r\n\t\r\n\t}\r\n\t\r\n}\r\nexport default App2;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App2  from './containers/App2';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './components/robots' ;\nReactDOM.render(\n  <React.StrictMode>\n  \t<div>\n  \t\t< App2 />\n  \t</div>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}